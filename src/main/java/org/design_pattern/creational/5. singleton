Singleton Pattern: là một trong 5 design pattern của nhóm Creational
Design Pattern.
Singleton đảm bảo chỉ duy nhất một thể hiện (instance) được tạo
ra và nó sẽ cung cấp cho bạn một method để có thể truy xuất được
thể hiện duy nhất đó mọi lúc mọi nơi trong chương trình.
Sử dụng singleton khi ta muốn:
Đảm bảo rằng chỉ có một instance của lớp.
Việc quản lý việc truy cập tốt hơn vì chỉ có một thể hiện duy nhất.
Có thể quản lý số lượng thể hiện của một lớp trong giới hạn chỉ định.

Cài đặt:
Các thành phần chính khi triển khai 1 Singleton:
private constructor để hạn chế truy cập từ class bên ngoài.
Đặt private static final variable đảm bảo biến chỉ được khởi tạo
trong class.
Có một method public static để return instance được khởi tạo ở trên.

Những cách để implement Singleton Pattern
1. Eager initialization
2. Static block initialization
3. Lazy Initialization
4. Double check locking singleton
5. Bill Pugh Singleton Implementation

Khi nào sử dụng Singleton?
Những trường hợp thường gặp:
+ Vì class dùng singleton chỉ tồn tại 1 instance nên nó thường
đưc dùng cho các trường hợp giải quyết các bài toán cần truy cập
vào các ứng dụng như: Share resource, Logger, Configuration, Caching
, Thread pool,...
+ Một số design pattern khác cũng sử dụng Singleton để triển khai:
Abstract Factory, Builder, Prototype, Facache, ...
+ Đã được sử dụng trong một số class của core java như:
java.lang.Runtime, java.awt.Desktop.

