Adapter Pattern: là một trong những pattern thuộc nhóm cấu trúc
Adapter cho phép các interface không liên quan tới nhau có thể làm
việc cùng nhau. Đối tượng giúp kết nối các interface gọi là Adapter.
Adapter giữ vai trò lớp trung gian giữa 2 lớp, chuyển đổi interface
của một hay nhiều lớp có sẵn thành 1 interface khác, thích hợp cho
lớp đang viết. Điều này cho phep các lớp có các interface khác nhau
có thể dễ dàng giao tiếp tốt với nhau thông qua interface trung gian,
không cần thay đổi code của lớp có sẵn cũng như lơsp đang viết.

Cài đặt:
Các thành phần chính:
Adaptee: định nghĩa interface không tương thích, cần được tích hợp
vào.
Adapter: lớp tích hợp, giúp interface không tương thích tích hợp
được với interface đang làm việc. Thực hiện việc chuển đổi interface
cho Adaptee và kết nối Adaptee với Client.
Target: Một interface chứa các chức năng được sử dụng bởi Client
Client: Lớp sử dụng các đối tượng có interface Target.


Ví dụ với ứng dụng Translation
Một người Việt Nam muốn trao đổi với một người Nhật. Tuy nhiên, 2
người này không biết ngôn ngữ của nhau nên cần phải có một người
để chuyển đổi từ ngôn ngữ Tiếng Việt sang ngôn ngữ Nhật. Chúng
ta sẽ mô hình hóa trường hợp này như sau:
Client: Người Việt sẽ là Client trong ví dụ này, vì anh ta cần gửi
một số message cho người Nhật.
Target: Đây là nội dung message được Client cung cấp cho thông dịch
viên.
Adapter: Thông dịch viên sẽ là Adapter, nhận message tiếng vệt từ
client và chuyển đổi nó sang tiếng Nhật trước khi gửi cho người Nhật
Adaptee: Đây là interface hoặc class được người Nhật sử dụng để
nhận message được chuyển đổi từ thông dịch viên.

Ví dụ với BufferedReader
System.in: Đây là một Adaptee. System.in là một static instance của
lớp InputStream, nó đọc dữ liệu từ Console và trả về 1 byte stream.
BufferedReader: Đây là target, nó chấp nhận dữ liệu là một character
stream.
InputStreamReader: Đây là một adapter ở giữa hai interface không tương
thích: System.in v BufferedReader giúp cho chúng có thể hoạt động
với nhau.
Client: là ứng dụng sẽ làm việc với Target interface.


-----------------
Lợi ích khi sử dụng Adapter Pattern.
1. Cho phép nhiều đối tượng có interface giao tiếp với nhau có thể
tương tác và giao tiếp với nhau.
2. Tăng khả năng sử dụng lại thư viện với interface không thay đổi
do không có mã nguồn.
Khuyết điểm:
1. Tất cả các yêu cầu được chuyển tiếp, do đó làm tăng thêm một ít
chi phí.
2. Đôi khi có quá nhiều Adapter được thiết kế trong một chuỗi Adapter
trước khi đến được yêu cầu thực sự.


-----------------
Sử dụng adapter pattern khi nào?
1. giúp nhiều lớp có thể làm việc với nhau dễ dàng mà bình thường
không thể. trường hợp hay gặp là khi không kế thừa lớp A, nhưng
muốn một lớp B có những xử lý tương tự lớp A. Khi đó chúng ta có
thể cài đặt B theo Object Adapter, các xử lý của B sẽ gọi những
xử lý của A khi cần.
2. Khi muốn sử dụng một lớp đã tồn tại trước đó nhưng interface
sử dụng không phù hợp như mong muốn.
3. Khi muốn tạo ra những lớp có khả năng sử dụng lại, chúng phối
hợp với các lớp không liên quan hay những lớp không thể đoán trước
được và những lơớp này không có những interface tương thích.
4. Cần phải có sự chuyển đổi interface từ nhiều nguồn khác nhau.
5. Khi cần đảm bảo nguyên tắc open/close trong một ứng dụng.
